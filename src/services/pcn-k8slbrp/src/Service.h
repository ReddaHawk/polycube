/**
* k8slbrp API generated from k8slbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/ServiceBase.h"

#include "ServiceBackend.h"

class K8slbrp;

using namespace polycube::service::model;

class Service : public ServiceBase {
 public:
  Service(K8slbrp &parent, const ServiceJsonObject &conf);
  virtual ~Service();

  /// <summary>
  /// Service name related to the backend server of the pool is connected to
  /// </summary>
  std::string getName() override;
  void setName(const std::string &value) override;

  /// <summary>
  /// Virtual IP (vip) of the service where clients connect to
  /// </summary>
  std::string getVip() override;

  /// <summary>
  /// Port of the virtual server where clients connect to (this value is ignored in case of ICMP)
  /// </summary>
  uint16_t getVport() override;

  /// <summary>
  /// Upper-layer protocol associated with a loadbalancing service instance. &#39;ALL&#39; creates an entry for all the supported protocols
  /// </summary>
  ServiceProtoEnum getProto() override;

  /// <summary>
  /// Pool of backend servers that actually serve requests
  /// </summary>
  std::shared_ptr<ServiceBackend> getBackend(const std::string &ip) override;
  std::vector<std::shared_ptr<ServiceBackend>> getBackendList() override;
  void addBackend(const std::string &ip, const ServiceBackendJsonObject &conf) override;
  void addBackendList(const std::vector<ServiceBackendJsonObject> &conf) override;
  void replaceBackend(const std::string &ip, const ServiceBackendJsonObject &conf) override;
  void delBackend(const std::string &ip) override;
  void delBackendList() override;
};
