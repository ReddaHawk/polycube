/**
* k8slbrp API generated from k8slbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "K8slbrp.h"
#include "K8slbrp_dp.h"

K8slbrp::K8slbrp(const std::string name, const K8slbrpJsonObject &conf)
  : Cube(conf.getBase(), { k8slbrp_code }, {}),
    K8slbrpBase(name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Lbrp] [%n] [%l] %v");
  logger()->info("Creating K8slbrp instance");

  addPortsList(conf.getPorts());
  addSrcIpRewrite(conf.getSrcIpRewrite());
  addServiceList(conf.getService());
}


K8slbrp::~K8slbrp() {
  logger()->info("Destroying K8slbrp instance");
}

void K8slbrp::packet_in(Ports &port,
    polycube::service::PacketInMetadata &md,
    const std::vector<uint8_t> &packet) {
  logger()->debug("Packet received from port {0}", port.name());
}

// Basic default implementation, place your extension here (if needed)
std::shared_ptr<Ports> K8slbrp::getPorts(const std::string &name) {
  // call default implementation in base class
  return K8slbrpBase::getPorts(name);
}

// Basic default implementation, place your extension here (if needed)
std::vector<std::shared_ptr<Ports>> K8slbrp::getPortsList() {
  // call default implementation in base class
  return K8slbrpBase::getPortsList();
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::addPorts(const std::string &name, const PortsJsonObject &conf) {
  K8slbrpBase::addPorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::addPortsList(const std::vector<PortsJsonObject> &conf) {
  // call default implementation in base class
  K8slbrpBase::addPortsList(conf);
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  // call default implementation in base class
  K8slbrpBase::replacePorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::delPorts(const std::string &name) {
  // call default implementation in base class
  K8slbrpBase::delPorts(name);
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::delPortsList() {
  // call default implementation in base class
  K8slbrpBase::delPortsList();
}

std::shared_ptr<SrcIpRewrite> K8slbrp::getSrcIpRewrite() {
  throw std::runtime_error("K8slbrp::getSrcIpRewrite: Method not implemented");
}

void K8slbrp::addSrcIpRewrite(const SrcIpRewriteJsonObject &value) {
  throw std::runtime_error("K8slbrp::addSrcIpRewrite: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::replaceSrcIpRewrite(const SrcIpRewriteJsonObject &conf) {
  // call default implementation in base class
  K8slbrpBase::replaceSrcIpRewrite(conf);
}

void K8slbrp::delSrcIpRewrite() {
  throw std::runtime_error("K8slbrp::delSrcIpRewrite: method not implemented");
}
std::shared_ptr<Service> K8slbrp::getService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  throw std::runtime_error("K8slbrp::getEntry: Method not implemented");
}

std::vector<std::shared_ptr<Service>> K8slbrp::getServiceList() {
  throw std::runtime_error("K8slbrp::getServiceList: Method not implemented");
}

void K8slbrp::addService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf) {
  throw std::runtime_error("K8slbrp::addService: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::addServiceList(const std::vector<ServiceJsonObject> &conf) {
  // call default implementation in base class
  K8slbrpBase::addServiceList(conf);
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::replaceService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf) {
  // call default implementation in base class
  K8slbrpBase::replaceService(vip, vport, proto, conf);
}

void K8slbrp::delService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) {
  throw std::runtime_error("K8slbrp::delService: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void K8slbrp::delServiceList() {
  // call default implementation in base class
  K8slbrpBase::delServiceList();
}


