/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* NodeportRuleJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  NodeportRuleJsonObject : public JsonObjectBase {
public:
  NodeportRuleJsonObject();
  NodeportRuleJsonObject(const nlohmann::json &json);
  ~NodeportRuleJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Source IP address
  /// </summary>
  std::string getInternalSrc() const;
  void setInternalSrc(std::string value);
  bool internalSrcIsSet() const;
  void unsetInternalSrc();

  /// <summary>
  /// Destination L4 port number
  /// </summary>
  uint16_t getNodeportPort() const;
  void setNodeportPort(uint16_t value);
  bool nodeportPortIsSet() const;

  /// <summary>
  /// L4 protocol
  /// </summary>
  std::string getProto() const;
  void setProto(std::string value);
  bool protoIsSet() const;

private:
  std::string m_internalSrc;
  bool m_internalSrcIsSet;
  uint16_t m_nodeportPort;
  bool m_nodeportPortIsSet;
  std::string m_proto;
  bool m_protoIsSet;
};

}
}
}

