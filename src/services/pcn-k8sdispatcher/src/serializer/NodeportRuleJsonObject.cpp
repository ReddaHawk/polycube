/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "NodeportRuleJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

NodeportRuleJsonObject::NodeportRuleJsonObject() {
  m_internalSrcIsSet = false;
  m_nodeportPortIsSet = false;
  m_protoIsSet = false;
}

NodeportRuleJsonObject::NodeportRuleJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_internalSrcIsSet = false;
  m_nodeportPortIsSet = false;
  m_protoIsSet = false;


  if (val.count("internal-src")) {
    setInternalSrc(val.at("internal-src").get<std::string>());
  }

  if (val.count("nodeport-port")) {
    setNodeportPort(val.at("nodeport-port").get<uint16_t>());
  }

  if (val.count("proto")) {
    setProto(val.at("proto").get<std::string>());
  }
}

nlohmann::json NodeportRuleJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_internalSrcIsSet) {
    val["internal-src"] = m_internalSrc;
  }

  if (m_nodeportPortIsSet) {
    val["nodeport-port"] = m_nodeportPort;
  }

  if (m_protoIsSet) {
    val["proto"] = m_proto;
  }

  return val;
}

std::string NodeportRuleJsonObject::getInternalSrc() const {
  return m_internalSrc;
}

void NodeportRuleJsonObject::setInternalSrc(std::string value) {
  m_internalSrc = value;
  m_internalSrcIsSet = true;
}

bool NodeportRuleJsonObject::internalSrcIsSet() const {
  return m_internalSrcIsSet;
}

void NodeportRuleJsonObject::unsetInternalSrc() {
  m_internalSrcIsSet = false;
}

uint16_t NodeportRuleJsonObject::getNodeportPort() const {
  return m_nodeportPort;
}

void NodeportRuleJsonObject::setNodeportPort(uint16_t value) {
  m_nodeportPort = value;
  m_nodeportPortIsSet = true;
}

bool NodeportRuleJsonObject::nodeportPortIsSet() const {
  return m_nodeportPortIsSet;
}



std::string NodeportRuleJsonObject::getProto() const {
  return m_proto;
}

void NodeportRuleJsonObject::setProto(std::string value) {
  m_proto = value;
  m_protoIsSet = true;
}

bool NodeportRuleJsonObject::protoIsSet() const {
  return m_protoIsSet;
}




}
}
}

