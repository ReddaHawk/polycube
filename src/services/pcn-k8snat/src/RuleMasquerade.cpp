/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "RuleMasquerade.h"
#include "K8snat.h"

using namespace polycube::service;

RuleMasquerade::RuleMasquerade(Rule &parent, const RuleMasqueradeJsonObject &conf)
    : parent_(parent),RuleMasqueradeBase(parent) {
  logger()->debug("constructor masquerade 2 params");
  if (conf.enabledIsSet()) {
    setEnabled(conf.getEnabled());
  }

}

RuleMasquerade::RuleMasquerade(Rule &parent) : parent_(parent), RuleMasqueradeBase(parent){
  logger()->debug("constructor masquerade 1 params");
  enabled = false;
}

RuleMasquerade::~RuleMasquerade() {}

void RuleMasquerade::update(const RuleMasqueradeJsonObject &conf) {
  // This method updates all the object/parameter in RuleMasquerade object
  // specified in the conf JsonObject.
  // You can modify this implementation.
  if (conf.enabledIsSet()) {
    setEnabled(conf.getEnabled());
  } else {
    setEnabled(false);
  }
}

RuleMasqueradeJsonObject RuleMasquerade::toJsonObject() {
  RuleMasqueradeJsonObject conf;
  conf.setEnabled(getEnabled());
  return conf;
}

bool RuleMasquerade::inject(uint32_t ip) {
  try {
    // Inject rule in the datapath table
    auto sm_rules = parent_.getParent().get_hash_table<sm_k, sm_v>(
        "sm_rules", 0, ProgramType::INGRESS);
    sm_k key{
        .internal_netmask_len = 0, .internal_ip = 0,
    };

    sm_v value{
        .external_ip = ip,
        .entry_type = (uint8_t)NattingTableOriginatingRuleEnum::MASQUERADE,
    };
    sm_rules.set(key, value);
  } catch (std::exception &e) {
    logger()->error("Error injecting masquerate rule " + std::string(e.what()));
    return false;
  }

  return true;
}

bool RuleMasquerade::getEnabled() {
  return enabled;
}

void RuleMasquerade::setEnabled(const bool &value) {
  if (value) {
    enable();
  } else {
    disable();
  }

  enabled = value;
}


RuleMasqueradeEnableOutputJsonObject RuleMasquerade::enable() {
  RuleMasqueradeEnableOutputJsonObject output;
  if (enabled) {
    // Already enabled
    output.setResult(true);
    return output;
  }

  uint32_t ip = 0;

  try {
    ip = utils::ip_string_to_nbo_uint(
        parent_.getParent().getExternalIpString());
  } catch(...) {
    output.setResult(false);
    return output;
  }

  bool result = inject(ip);
  output.setResult(result);
  if (result) {
    enabled = true;
    logger()->info("Enabled masquerade: 0.0.0.0 -> {0}",
                   parent_.getParent().getExternalIpString());
  }

  return output;
}

RuleMasqueradeDisableOutputJsonObject RuleMasquerade::disable() {
  RuleMasqueradeDisableOutputJsonObject output;
  if (!enabled) {
    // Already disabled
    output.setResult(true);
    return output;
  }

  bool result = inject(0);
  output.setResult(result);
  if (result) {
    enabled = false;
    logger()->info("Disabled masquerade");
  }

  return output;
}

