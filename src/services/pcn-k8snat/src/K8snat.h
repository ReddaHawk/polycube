/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/K8snatBase.h"

#include "NattingTable.h"
#include "Ports.h"
#include "Rule.h"
#include "polycube/services/utils.h"


using namespace polycube::service::model;

/* definitions copied from datapath */
struct dp_k {
  uint32_t mask;
  uint32_t external_ip;
  uint16_t external_port;
  uint8_t proto;
} __attribute__((packed));

struct dp_v {
  uint32_t internal_ip;
  uint16_t internal_port;
  uint8_t entry_type;
} __attribute__((packed));

struct sm_k {
  uint32_t internal_netmask_len;
  uint32_t internal_ip;
} __attribute__((packed));

struct sm_v {
  uint32_t external_ip;
  uint8_t entry_type;
} __attribute__((packed));


class K8snat : public K8snatBase {
 public:
  K8snat(const std::string name, const K8snatJsonObject &conf);
  virtual ~K8snat();

  void packet_in(Ports &port,
                 polycube::service::PacketInMetadata &md,
                 const std::vector<uint8_t> &packet) override;
  void reloadConfig();
  K8snatJsonObject toJsonObject();
  /// <summary>
  /// Entry of the ports table
  /// </summary>
  std::shared_ptr<Ports> getPorts(const std::string &name) override;
  std::vector<std::shared_ptr<Ports>> getPortsList() override;
  void addPorts(const std::string &name, const PortsJsonObject &conf) override;
  void addPortsList(const std::vector<PortsJsonObject> &conf) override;
  void replacePorts(const std::string &name, const PortsJsonObject &conf) override;
  void delPorts(const std::string &name) override;
  void delPortsList() override;
  std::shared_ptr<Ports> getFrontendPort();
  std::shared_ptr<Ports> getBackendPort();
  std::shared_ptr<Ports> getNodeportPort();

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Rule> getRule() override;
  void addRule(const RuleJsonObject &value) override;
  void replaceRule(const RuleJsonObject &conf) override;
  void delRule() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<NattingTable> getNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) override;
  std::vector<std::shared_ptr<NattingTable>> getNattingTableList() override;
  void addNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &conf) override;
  void addNattingTableList(const std::vector<NattingTableJsonObject> &conf) override;
  void replaceNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &conf) override;
  void delNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) override;
  void delNattingTableList() override;

  uint8_t proto_from_string_to_int(const std::string &proto);
  std::string proto_from_int_to_string(const uint8_t proto);

  const std::string &getExternalIpString();

 private:
  std::shared_ptr<Rule> rule_;
  std::string external_ip_;
};
