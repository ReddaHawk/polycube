/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/RuleBase.h"

#include "RuleDnat.h"
#include "RuleMasquerade.h"
#include "RulePortForwarding.h"
#include "RuleSnat.h"

class K8snat;

using namespace polycube::service::model;

class Rule : public RuleBase {
 public:
  Rule(K8snat &parent, const RuleJsonObject &conf);
  virtual ~Rule();

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RuleSnat> getSnat() override;
  void addSnat(const RuleSnatJsonObject &value) override;
  void replaceSnat(const RuleSnatJsonObject &conf) override;
  void delSnat() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RuleMasquerade> getMasquerade() override;
  void addMasquerade(const RuleMasqueradeJsonObject &value) override;
  void replaceMasquerade(const RuleMasqueradeJsonObject &conf) override;
  void delMasquerade() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RuleDnat> getDnat() override;
  void addDnat(const RuleDnatJsonObject &value) override;
  void replaceDnat(const RuleDnatJsonObject &conf) override;
  void delDnat() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RulePortForwarding> getPortForwarding() override;
  void addPortForwarding(const RulePortForwardingJsonObject &value) override;
  void replacePortForwarding(const RulePortForwardingJsonObject &conf) override;
  void delPortForwarding() override;
  void update(const RuleJsonObject &conf);
  RuleJsonObject toJsonObject();
  K8snat &getParent();
 private:
  K8snat &parent_;
  std::shared_ptr<RuleSnat> snat_;
  std::shared_ptr<RuleDnat> dnat_;
  std::shared_ptr<RulePortForwarding> portforwarding_;
  std::shared_ptr<RuleMasquerade> masquerade_;

};
