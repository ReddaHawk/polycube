/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "RulePortForwarding.h"
#include "K8snat.h"


RulePortForwarding::RulePortForwarding(Rule &parent, const RulePortForwardingJsonObject &conf)
    : RulePortForwardingBase(parent) {
  addEntryList(conf.getEntry());
}

RulePortForwarding::~RulePortForwarding() {}
std::shared_ptr<RulePortForwardingEntry> RulePortForwarding::getEntry(const uint32_t &id) {
  throw std::runtime_error("RulePortForwarding::getEntry: Method not implemented");
}

std::vector<std::shared_ptr<RulePortForwardingEntry>> RulePortForwarding::getEntryList() {
  throw std::runtime_error("RulePortForwarding::getEntryList: Method not implemented");
}

void RulePortForwarding::addEntry(const uint32_t &id, const RulePortForwardingEntryJsonObject &conf) {
  throw std::runtime_error("RulePortForwarding::addEntry: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void RulePortForwarding::addEntryList(const std::vector<RulePortForwardingEntryJsonObject> &conf) {
  // call default implementation in base class
  RulePortForwardingBase::addEntryList(conf);
}

// Basic default implementation, place your extension here (if needed)
void RulePortForwarding::replaceEntry(const uint32_t &id, const RulePortForwardingEntryJsonObject &conf) {
  // call default implementation in base class
  RulePortForwardingBase::replaceEntry(id, conf);
}

void RulePortForwarding::delEntry(const uint32_t &id) {
  throw std::runtime_error("RulePortForwarding::delEntry: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void RulePortForwarding::delEntryList() {
  // call default implementation in base class
  RulePortForwardingBase::delEntryList();
}


RulePortForwardingAppendOutputJsonObject RulePortForwarding::append(RulePortForwardingAppendInputJsonObject input) {
  throw std::runtime_error("RulePortForwarding::RulePortForwardingAppendOutput: Method not implemented");
}

