/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "RuleBase.h"
#include "../K8snat.h"


RuleBase::RuleBase(K8snat &parent)
    : parent_(parent) {}

RuleBase::~RuleBase() {}

void RuleBase::update(const RuleJsonObject &conf) {

  if (conf.snatIsSet()) {
    auto m = getSnat();
    m->update(conf.getSnat());
  }
  if (conf.masqueradeIsSet()) {
    auto m = getMasquerade();
    m->update(conf.getMasquerade());
  }
  if (conf.dnatIsSet()) {
    auto m = getDnat();
    m->update(conf.getDnat());
  }
  if (conf.portForwardingIsSet()) {
    auto m = getPortForwarding();
    m->update(conf.getPortForwarding());
  }
}

RuleJsonObject RuleBase::toJsonObject() {
  RuleJsonObject conf;

  conf.setSnat(getSnat()->toJsonObject());
  conf.setMasquerade(getMasquerade()->toJsonObject());
  conf.setDnat(getDnat()->toJsonObject());
  conf.setPortForwarding(getPortForwarding()->toJsonObject());

  return conf;
}

void RuleBase::replaceSnat(const RuleSnatJsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  delSnat();
  addSnat(conf);
}

void RuleBase::replaceMasquerade(const RuleMasqueradeJsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  delMasquerade();
  addMasquerade(conf);
}

void RuleBase::replaceDnat(const RuleDnatJsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  delDnat();
  addDnat(conf);
}

void RuleBase::replacePortForwarding(const RulePortForwardingJsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  delPortForwarding();
  addPortForwarding(conf);
}

std::shared_ptr<spdlog::logger> RuleBase::logger() {
  return parent_.logger();
}

