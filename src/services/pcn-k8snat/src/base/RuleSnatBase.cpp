/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "RuleSnatBase.h"
#include "../K8snat.h"


RuleSnatBase::RuleSnatBase(Rule &parent)
    : parent_(parent) {}

RuleSnatBase::~RuleSnatBase() {}

void RuleSnatBase::update(const RuleSnatJsonObject &conf) {

  if (conf.entryIsSet()) {
    for (auto &i : conf.getEntry()) {
      auto id = i.getId();
      auto m = getEntry(id);
      m->update(i);
    }
  }
}

RuleSnatJsonObject RuleSnatBase::toJsonObject() {
  RuleSnatJsonObject conf;

  for(auto &i : getEntryList()) {
    conf.addRuleSnatEntry(i->toJsonObject());
  }

  return conf;
}
void RuleSnatBase::addEntryList(const std::vector<RuleSnatEntryJsonObject> &conf) {
  for (auto &i : conf) {
    uint32_t id_ = i.getId();
    addEntry(id_, i);
  }
}

void RuleSnatBase::replaceEntry(const uint32_t &id, const RuleSnatEntryJsonObject &conf) {
  delEntry(id);
  uint32_t id_ = conf.getId();
  addEntry(id_, conf);
}

void RuleSnatBase::delEntryList() {
  auto elements = getEntryList();
  for (auto &i : elements) {
    uint32_t id_ = i->getId();
    delEntry(id_);
  }
}

std::shared_ptr<spdlog::logger> RuleSnatBase::logger() {
  return parent_.logger();
}

