/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "K8snatBase.h"

K8snatBase::K8snatBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [K8snat] [%n] [%l] %v");
}



K8snatBase::~K8snatBase() {}

void K8snatBase::update(const K8snatJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.portsIsSet()) {
    for (auto &i : conf.getPorts()) {
      auto name = i.getName();
      auto m = getPorts(name);
      m->update(i);
    }
  }
  if (conf.ruleIsSet()) {
    auto m = getRule();
    m->update(conf.getRule());
  }
  if (conf.nattingTableIsSet()) {
    for (auto &i : conf.getNattingTable()) {
      auto internalSrc = i.getInternalSrc();
      auto internalDst = i.getInternalDst();
      auto internalSport = i.getInternalSport();
      auto internalDport = i.getInternalDport();
      auto proto = i.getProto();
      auto m = getNattingTable(internalSrc, internalDst, internalSport, internalDport, proto);
      m->update(i);
    }
  }
}

K8snatJsonObject K8snatBase::toJsonObject() {
  K8snatJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  for (auto &i : getPortsList()) {
    conf.addPorts(i->toJsonObject());
  }
  conf.setRule(getRule()->toJsonObject());
  for(auto &i : getNattingTableList()) {
    conf.addNattingTable(i->toJsonObject());
  }

  return conf;
}
void K8snatBase::addPortsList(const std::vector<PortsJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addPorts(name_, i);
  }
}

void K8snatBase::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  delPorts(name);
  std::string name_ = conf.getName();
  addPorts(name_, conf);
}

void K8snatBase::delPortsList() {
  auto elements = getPortsList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delPorts(name_);
  }
}

void K8snatBase::addPorts(const std::string &name, const PortsJsonObject &conf) {
  add_port<PortsJsonObject>(name, conf);
}

void K8snatBase::delPorts(const std::string &name) {
  remove_port(name);
}

std::shared_ptr<Ports> K8snatBase::getPorts(const std::string &name) {
  return get_port(name);
}

std::vector<std::shared_ptr<Ports>> K8snatBase::getPortsList() {
  return get_ports();
}

void K8snatBase::replaceRule(const RuleJsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  delRule();
  addRule(conf);
}
void K8snatBase::addNattingTableList(const std::vector<NattingTableJsonObject> &conf) {
  for (auto &i : conf) {
    std::string internalSrc_ = i.getInternalSrc();
    std::string internalDst_ = i.getInternalDst();
    uint16_t internalSport_ = i.getInternalSport();
    uint16_t internalDport_ = i.getInternalDport();
    std::string proto_ = i.getProto();
    addNattingTable(internalSrc_, internalDst_, internalSport_, internalDport_, proto_, i);
  }
}

void K8snatBase::replaceNattingTable(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingTableJsonObject &conf) {
  delNattingTable(internalSrc, internalDst, internalSport, internalDport, proto);
  std::string internalSrc_ = conf.getInternalSrc();
  std::string internalDst_ = conf.getInternalDst();
  uint16_t internalSport_ = conf.getInternalSport();
  uint16_t internalDport_ = conf.getInternalDport();
  std::string proto_ = conf.getProto();
  addNattingTable(internalSrc_, internalDst_, internalSport_, internalDport_, proto_, conf);
}

void K8snatBase::delNattingTableList() {
  auto elements = getNattingTableList();
  for (auto &i : elements) {
    std::string internalSrc_ = i->getInternalSrc();
    std::string internalDst_ = i->getInternalDst();
    uint16_t internalSport_ = i->getInternalSport();
    uint16_t internalDport_ = i->getInternalDport();
    std::string proto_ = i->getProto();
    delNattingTable(internalSrc_, internalDst_, internalSport_, internalDport_, proto_);
  }
}


