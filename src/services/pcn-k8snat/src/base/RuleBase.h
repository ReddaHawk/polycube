/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* RuleBase.h
*
*
*/

#pragma once

#include "../serializer/RuleJsonObject.h"

#include "../RuleDnat.h"
#include "../RuleMasquerade.h"
#include "../RulePortForwarding.h"
#include "../RuleSnat.h"





#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class K8snat;

class RuleBase {
 public:
  
  RuleBase(K8snat &parent);
  
  virtual ~RuleBase();
  virtual void update(const RuleJsonObject &conf);
  virtual RuleJsonObject toJsonObject();

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<RuleSnat> getSnat() = 0;
  virtual void addSnat(const RuleSnatJsonObject &value) = 0;
  virtual void replaceSnat(const RuleSnatJsonObject &conf);
  virtual void delSnat() = 0;

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<RuleMasquerade> getMasquerade() = 0;
  virtual void addMasquerade(const RuleMasqueradeJsonObject &value) = 0;
  virtual void replaceMasquerade(const RuleMasqueradeJsonObject &conf);
  virtual void delMasquerade() = 0;

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<RuleDnat> getDnat() = 0;
  virtual void addDnat(const RuleDnatJsonObject &value) = 0;
  virtual void replaceDnat(const RuleDnatJsonObject &conf);
  virtual void delDnat() = 0;

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<RulePortForwarding> getPortForwarding() = 0;
  virtual void addPortForwarding(const RulePortForwardingJsonObject &value) = 0;
  virtual void replacePortForwarding(const RulePortForwardingJsonObject &conf);
  virtual void delPortForwarding() = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  K8snat &parent_;
};
