/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "RuleSnatJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

RuleSnatJsonObject::RuleSnatJsonObject() {
  m_entryIsSet = false;
}

RuleSnatJsonObject::RuleSnatJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_entryIsSet = false;


  if (val.count("entry")) {
    for (auto& item : val["entry"]) {
      RuleSnatEntryJsonObject newItem{ item };
      m_entry.push_back(newItem);
    }

    m_entryIsSet = true;
  }
}

nlohmann::json RuleSnatJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_entry) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["entry"] = jsonArray;
    }
  }

  return val;
}

const std::vector<RuleSnatEntryJsonObject>& RuleSnatJsonObject::getEntry() const{
  return m_entry;
}

void RuleSnatJsonObject::addRuleSnatEntry(RuleSnatEntryJsonObject value) {
  m_entry.push_back(value);
  m_entryIsSet = true;
}


bool RuleSnatJsonObject::entryIsSet() const {
  return m_entryIsSet;
}

void RuleSnatJsonObject::unsetEntry() {
  m_entryIsSet = false;
}


}
}
}

