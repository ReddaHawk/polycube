/**
* k8snat API generated from k8snat.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* RulePortForwardingEntryJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  RulePortForwardingEntryJsonObject : public JsonObjectBase {
public:
  RulePortForwardingEntryJsonObject();
  RulePortForwardingEntryJsonObject(const nlohmann::json &json);
  ~RulePortForwardingEntryJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Rule identifier
  /// </summary>
  uint32_t getId() const;
  void setId(uint32_t value);
  bool idIsSet() const;

  /// <summary>
  /// External destination IP address
  /// </summary>
  std::string getExternalIp() const;
  void setExternalIp(std::string value);
  bool externalIpIsSet() const;

  /// <summary>
  /// External destination L4 port
  /// </summary>
  uint16_t getExternalPort() const;
  void setExternalPort(uint16_t value);
  bool externalPortIsSet() const;

  /// <summary>
  /// L4 protocol (TCP, UDP, ALL)
  /// </summary>
  std::string getProto() const;
  void setProto(std::string value);
  bool protoIsSet() const;
  void unsetProto();

  /// <summary>
  /// Internal destination IP address
  /// </summary>
  std::string getInternalIp() const;
  void setInternalIp(std::string value);
  bool internalIpIsSet() const;

  /// <summary>
  /// Internal destination L4 port
  /// </summary>
  uint16_t getInternalPort() const;
  void setInternalPort(uint16_t value);
  bool internalPortIsSet() const;

private:
  uint32_t m_id;
  bool m_idIsSet;
  std::string m_externalIp;
  bool m_externalIpIsSet;
  uint16_t m_externalPort;
  bool m_externalPortIsSet;
  std::string m_proto;
  bool m_protoIsSet;
  std::string m_internalIp;
  bool m_internalIpIsSet;
  uint16_t m_internalPort;
  bool m_internalPortIsSet;
};

}
}
}

